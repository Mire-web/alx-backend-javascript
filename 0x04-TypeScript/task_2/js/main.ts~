interface DirectorInterface {
  workFromHome(): string;
  getCoffeeBreak(): string;
  workDirectorTasks(): string;
}

interface TeacherInterface {
  workFromHome(): string;
  getCoffeeBreak(): string;
  workTeacherTasks(): string;
}

class Director implements DirectorInterface {
  workFromHome() return 'Working from home';
  getCoffeeBreak() return 'Getting a coffee break';
  workDirectorTasks() return 'Getting to director tasks';
}

class Teacher implements TeacherInterface {
  workFromHome() return 'Cannot work from home';
  getCoffeeBreak() return 'Cannot have a break';
  workTeacherTasks() return 'Getting to work';
}

const createEmployee: Director | Teacher = (salary: number | string) => {
  if (typeof salary === 'number' && salary < 500) return new Teacher();
  return new Director();
};

const isDirector: boolean = (employee: Director | Teacher) => {
  return employee instanceof Director;
};

const executeWork = (employee: Director | Teacher) => {
  if (employee instanceof Director) return (employee as Director).workDirectorTasks();
  return (employee as Teacher).workTeacherTasks();
};

type Subjects = 'Math' | 'History';

const teachClass: void = (subject) => {
  Subjects = subject;
  console.log(`Teaching ${Subjects}`)
};
